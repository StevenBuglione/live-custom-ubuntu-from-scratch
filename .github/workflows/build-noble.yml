name: build-noble-trezor

on:
  workflow_dispatch:
    inputs:
      trezor_tag:
        description: "Optional: pin a specific Trezor Suite tag (e.g., v25.9.3). Leave empty for latest."
        required: false
        default: ""
  push:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    env:
      # Trezor verification
      TREZOR_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"  # SatoshiLabs 2021 Signing Key
      TREZOR_KEY_URL: "https://trezor.io/security/satoshilabs-2021-signing-key.asc"
      # Where the original project will emit the ISO and image dir
      ISO_PATH: "scripts/ubuntu-from-scratch.iso"
      IMAGE_DIR: "scripts/image"
      # Where we’ll stage Trezor bits
      STAGE_DIR: "trezor-stage"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # === Run the repository's normal "noble" build ===
      - name: Build (upstream logic for noble)
        run: |
          set -euo pipefail
          cd scripts
          # This follows the upstream workflow (.github/workflows/build-noble.yml)
          # which sets noble and runs build.sh
          sed -i -E 's/TARGET_UBUNTU_VERSION=(.*)/TARGET_UBUNTU_VERSION="noble"/g' default_config.sh
          ./build.sh -
          cd -

      - name: Show upstream outputs
        if: always()
        run: |
          set -euo pipefail
          ls -lah scripts || true
          ls -lah "${IMAGE_DIR}" || true
          test -s "${ISO_PATH}" || { echo "ISO not found at ${ISO_PATH}"; exit 2; }

      # === Fetch & verify Trezor Suite AppImage (authenticated GitHub API to avoid 403/rates) ===
      - name: Fetch latest (or pinned) Trezor Suite AppImage + signature
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p "${STAGE_DIR}"
          TAG="${{ github.event.inputs.trezor_tag }}"
          API="https://api.github.com/repos/trezor/trezor-suite/releases"
          URL=${TAG:+$API/tags/${TAG}}
          URL=${URL:-$API/latest}

          echo "Querying release: $URL"
          curl -fsSL \
               -H "Authorization: Bearer ${GH_TOKEN}" \
               -H "Accept: application/vnd.github+json" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               "$URL" -o "${STAGE_DIR}/release.json"

          APP_ID=$(jq -r '.assets[] | select(.name|test("AppImage$")) | .id' "${STAGE_DIR}/release.json" | head -n1)
          ASC_ID=$(jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .id' "${STAGE_DIR}/release.json" | head -n1)
          test -n "$APP_ID" && test -n "$ASC_ID" || { echo "AppImage/.asc not found"; jq -r '.assets[]?.name' "${STAGE_DIR}/release.json"; exit 12; }

          dl() { # (id, out)
            curl -fsSLo "$2" \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              -H "Accept: application/octet-stream" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/trezor/trezor-suite/releases/assets/${1}";
          }
          dl "$APP_ID" "${STAGE_DIR}/trezor-suite.AppImage"
          dl "$ASC_ID" "${STAGE_DIR}/trezor-suite.AppImage.asc"
          chmod +x "${STAGE_DIR}/trezor-suite.AppImage"

      - name: Verify Trezor Suite signature (pinned fingerprint)
        run: |
          set -euo pipefail
          export GNUPGHOME="$PWD/${STAGE_DIR}/gnupg"
          mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"
          curl -fsSL "${TREZOR_KEY_URL}" -o "${STAGE_DIR}/trezor.asc"
          gpg --batch --import "${STAGE_DIR}/trezor.asc"
          # Verify and interpret machine-readable status
          gpg --status-fd=1 --batch --verify \
              "${STAGE_DIR}/trezor-suite.AppImage.asc" "${STAGE_DIR}/trezor-suite.AppImage" \
              1> "${STAGE_DIR}/gpg-status.log" 2> "${STAGE_DIR}/gpg-stderr.log" || true
          GOODSIG=$(awk 'BEGIN{c=0} /^\[GNUPG:\] GOODSIG /{c++} END{print c}' "${STAGE_DIR}/gpg-status.log")
          SIG_FPR=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' "${STAGE_DIR}/gpg-status.log")
          echo "GOODSIG count: ${GOODSIG:-0}"
          echo "VALIDSIG fingerprint: ${SIG_FPR:-missing}"
          [[ "${GOODSIG:-0}" -ge 1 && -n "$SIG_FPR" && "$SIG_FPR" == "$TREZOR_FPR" ]] || {
            echo "Signature failed or fingerprint mismatch"; exit 13; }

      # === Inject Trezor into the squashfs and re-spin the ISO ===
      - name: Install tools for injection & ISO rebuild
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends squashfs-tools xorriso mtools dosfstools

      - name: Inject AppImage + udev + desktop into filesystem.squashfs
        run: |
          set -euo pipefail
          # 1) Unsquash the live filesystem
          test -d "${IMAGE_DIR}" || { echo "Image dir not found: ${IMAGE_DIR}"; exit 2; }
          test -s "${IMAGE_DIR}/casper/filesystem.squashfs" || { echo "No squashfs found"; exit 2; }

          rm -rf unsquash
          mkdir -p unsquash
          sudo unsquashfs -d unsquash/rootfs "${IMAGE_DIR}/casper/filesystem.squashfs"

          # 2) Place Trezor Suite
          sudo install -d -m 0755 "unsquash/rootfs/opt/trezor"
          sudo cp -a "${STAGE_DIR}/trezor-suite.AppImage" "unsquash/rootfs/opt/trezor/trezor-suite.AppImage"
          sudo chmod +x "unsquash/rootfs/opt/trezor/trezor-suite.AppImage"

          # 3) udev rules (from trezor data site)
          curl -fsSL "https://data.trezor.io/udev/51-trezor.rules" -o 51-trezor.rules
          sudo install -D -m 0644 51-trezor.rules "unsquash/rootfs/etc/udev/rules.d/51-trezor.rules"

          # 4) Desktop launcher
          cat > trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Manage your Trezor hardware wallet
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF
          sudo install -D -m 0644 trezor-suite.desktop "unsquash/rootfs/usr/share/applications/trezor-suite.desktop"

          # 5) Rebuild squashfs (same compression style as docs)
          sudo mksquashfs unsquash/rootfs "${IMAGE_DIR}/casper/filesystem.squashfs" \
            -noappend -no-duplicates -no-recovery -wildcards \
            -comp xz -b 1M -Xdict-size 100%

          # 6) Regenerate md5sums inside the image dir (project’s README shows this pattern)
          ( cd "${IMAGE_DIR}" && \
            /bin/bash -c '(find . -type f -print0 | xargs -0 md5sum | grep -v -e "isolinux" > md5sum.txt)' )

      - name: Rebuild ISO (xorriso; aligns with project’s documented command)
        run: |
          set -euo pipefail
          # Rebuild ISO from ${IMAGE_DIR} contents using the same approach documented in README.
          # (This matches the "Create iso from the image directory" snippet.)
          sudo xorriso \
            -as mkisofs \
            -iso-level 3 \
            -full-iso9660-filenames \
            -J -J -joliet-long \
            -volid "Ubuntu from scratch" \
            -output "${ISO_PATH}" \
            -eltorito-boot isolinux/bios.img \
              -no-emul-boot \
              -boot-load-size 4 \
              -boot-info-table \
              --eltorito-catalog boot.catalog \
              --grub2-boot-info \
              --grub2-mbr ../chroot/usr/lib/grub/i386-pc/boot_hybrid.img \
              -partition_offset 16 \
              --mbr-force-bootable \
            -eltorito-alt-boot \
              -no-emul-boot \
              -e isolinux/efiboot.img \
              -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b isolinux/efiboot.img \
              -appended_part_as_gpt \
              -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \
              -m "isolinux/efiboot.img" \
              -m "isolinux/bios.img" \
              -e '--interval:appended_partition_2:::' \
            -exclude isolinux \
            -graft-points \
              "/EFI/boot/bootx64.efi=isolinux/bootx64.efi" \
              "/EFI/boot/mmx64.efi=isolinux/mmx64.efi" \
              "/EFI/boot/grubx64.efi=isolinux/grubx64.efi" \
              "/EFI/ubuntu/grub.cfg=isolinux/grub.cfg" \
              "/isolinux/bios.img=isolinux/bios.img" \
              "/isolinux/efiboot.img=isolinux/efiboot.img" \
              "." \
            -pathspecs on \
            -md5 all \
            -udf

          ls -lah "${ISO_PATH}"

      - name: Checksums
        run: |
          set -euo pipefail
          sha256sum "${ISO_PATH}" | tee "${ISO_PATH}.sha256"

      - name: Upload artifacts (ISO + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-noble-trezor
          path: |
            scripts/ubuntu-from-scratch.iso
            scripts/ubuntu-from-scratch.iso.sha256
            scripts/image/md5sum.txt
            trezor-stage/**
          retention-days: 14
